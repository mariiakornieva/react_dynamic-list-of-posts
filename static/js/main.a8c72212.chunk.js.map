{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","request","url","args","fetch","then","response","ok","Error","status","statusText","json","data","getPostComments","postId","comments","filter","comment","PostsList","selectedUserId","onSelectPost","selectedPostId","isPostDetailsOpen","useState","posts","setPosts","useEffect","userId","post","className","length","map","key","id","title","type","onClick","defaultProps","NewCommentForm","onAddComment","name","setName","email","setEmail","body","setBody","method","onSubmit","e","preventDefault","value","onChange","target","placeholder","PostDetails","React","memo","postDetails","setPostDetails","postComments","setPostComments","commentsVisible","setCommentsVisible","handleDeleteComment","commentId","Promise","all","details","catch","error","console","warn","JSON","stringify","createComment","App","users","setUsers","setSelectedPostId","setSelectedUserId","setIsPostDetailsOpen","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8c72212.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nconst request = (url, ...args) => fetch(`${BASE_URL}${url}`, ...args)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} --- ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(json => json.data);\n\nexport const getUsers = () => request('/users');\n\nexport const getPosts = () => request('/posts');\n\nexport const getUserPosts = userId => (\n  request('/posts')\n    .then(posts => posts.filter(post => post.userId === userId))\n);\n\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n\nexport const getPostComments = postId => (\n  request(`/comments`)\n    .then(comments => comments.filter(comment => comment.postId === postId))\n);\n\nexport const deleteComment = commentId => (\n  request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  })\n);\n\nexport const createComment = data => (\n  request('/comments', {\n    method: 'POST',\n    body: JSON.stringify(data),\n  })\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { getPosts, getUserPosts } from '../../api/posts';\n\nconst UNKNOWN_USER_ID = 0;\n\nexport const PostsList = ({\n  selectedUserId, onSelectPost, selectedPostId,\n  isPostDetailsOpen,\n}) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    if (selectedUserId === UNKNOWN_USER_ID) {\n      getPosts()\n        .then(setPosts);\n    } else {\n      getUserPosts(selectedUserId)\n        .then(setPosts);\n    }\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      {posts.length === 0 ? (\n        <h2>No Posts Available</h2>\n      ) : (\n        <>\n          <h2>Posts:</h2>\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li\n                key={post.id}\n                className=\"PostsList__item\"\n              >\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.title}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => onSelectPost(post.id)}\n                >\n                  {post.id === selectedPostId && isPostDetailsOpen\n                    ? 'Close' : 'Open'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedUserId: PropTypes.number,\n  selectedPostId: PropTypes.number,\n  onSelectPost: PropTypes.func.isRequired,\n  isPostDetailsOpen: PropTypes.bool,\n};\n\nPostsList.defaultProps = {\n  selectedUserId: 0,\n  selectedPostId: 0,\n  isPostDetailsOpen: false,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ selectedPostId, onAddComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    setName('');\n    setEmail('');\n    setBody('');\n  }\n\n  return (\n    <form\n      method=\"POST\"\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={e => setEmail(e.target.value)}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          onChange={e => setBody(e.target.value)}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={() => onAddComment({\n          postId: selectedPostId,\n          name,\n          email,\n          body,\n        })}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  selectedPostId: PropTypes.number,\n  onAddComment: PropTypes.func.isRequired,\n};\n\nNewCommentForm.defaultProps = {\n  selectedPostId: 0,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport {\n  getPostDetails, getPostComments, deleteComment, createComment,\n} from '../../api/posts';\n\nexport const PostDetails = React.memo(({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState(null);\n  const [postComments, setPostComments] = useState(null);\n  const [commentsVisible, setCommentsVisible] = useState(true);\n\n  useEffect(() => {\n    Promise.all([\n      getPostDetails(selectedPostId),\n      getPostComments(selectedPostId),\n    ])\n      .then(([details, comments]) => {\n        setPostDetails(details);\n        setPostComments(comments);\n        setCommentsVisible(true);\n      })\n      // eslint-disable-next-line no-console\n      .catch(error => console.warn(error));\n  }, [selectedPostId]);\n\n  function handleDeleteComment(id) {\n    deleteComment(id)\n      .then(() => getPostComments(selectedPostId))\n      .then(setPostComments);\n  }\n\n  function handleCreateComment(data) {\n    createComment(data)\n      .then(() => getPostComments(selectedPostId))\n      .then(setPostComments);\n  }\n\n  return (\n    <>\n      {postDetails !== null && (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{postDetails.body}</p>\n          </section>\n\n          {postComments !== null && (\n            <section className=\"PostDetails__comments\">\n              {postComments.length > 0 && (\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => setCommentsVisible(!commentsVisible)}\n                >\n                  {`${commentsVisible ? 'Hide' : 'Show'} `}\n                  {`${postComments.length} comments`}\n                </button>\n              )}\n\n              {commentsVisible && (\n                <ul className=\"PostDetails__list\">\n                  {postComments.map(comment => (\n                    <li\n                      key={comment.id}\n                      className=\"PostDetails__list-item\"\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => handleDeleteComment(comment.id)}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </section>\n          )}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                selectedPostId={selectedPostId}\n                onAddComment={handleCreateComment}\n              />\n            </div>\n          </section>\n        </div>\n      )}\n    </>\n  );\n});\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number,\n};\n\nPostDetails.defaultProps = {\n  selectedPostId: 0,\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/posts';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [isPostDetailsOpen, setIsPostDetailsOpen] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  function handleSelectPost(id) {\n    if (id !== selectedPostId) {\n      setSelectedPostId(id);\n      setIsPostDetailsOpen(true);\n    } else {\n      setIsPostDetailsOpen(!isPostDetailsOpen);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            name=\"selectedUser\"\n            value={selectedUserId}\n            onChange={e => setSelectedUserId(+e.target.value)}\n            className=\"App__user-selector\"\n          >\n            <option key=\"All Users\" value=\"0\">All Users</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            onSelectPost={handleSelectPost}\n            isPostDetailsOpen={isPostDetailsOpen}\n          />\n        </div>\n\n        {isPostDetailsOpen && (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}